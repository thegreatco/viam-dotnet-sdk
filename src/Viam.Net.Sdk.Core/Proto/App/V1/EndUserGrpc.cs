// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app/v1/end_user.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.App.V1 {
  public static partial class EndUserService
  {
    static readonly string __ServiceName = "viam.app.v1.EndUserService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.V1.IsLegalAcceptedRequest> __Marshaller_viam_app_v1_IsLegalAcceptedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.V1.IsLegalAcceptedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.V1.IsLegalAcceptedResponse> __Marshaller_viam_app_v1_IsLegalAcceptedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.V1.IsLegalAcceptedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.V1.AcceptLegalRequest> __Marshaller_viam_app_v1_AcceptLegalRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.V1.AcceptLegalRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.V1.AcceptLegalResponse> __Marshaller_viam_app_v1_AcceptLegalResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.V1.AcceptLegalResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.V1.RegisterAuthApplicationRequest> __Marshaller_viam_app_v1_RegisterAuthApplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.V1.RegisterAuthApplicationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.V1.RegisterAuthApplicationResponse> __Marshaller_viam_app_v1_RegisterAuthApplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.V1.RegisterAuthApplicationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.V1.UpdateAuthApplicationRequest> __Marshaller_viam_app_v1_UpdateAuthApplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.V1.UpdateAuthApplicationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.V1.UpdateAuthApplicationResponse> __Marshaller_viam_app_v1_UpdateAuthApplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.V1.UpdateAuthApplicationResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.V1.IsLegalAcceptedRequest, global::Viam.App.V1.IsLegalAcceptedResponse> __Method_IsLegalAccepted = new grpc::Method<global::Viam.App.V1.IsLegalAcceptedRequest, global::Viam.App.V1.IsLegalAcceptedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsLegalAccepted",
        __Marshaller_viam_app_v1_IsLegalAcceptedRequest,
        __Marshaller_viam_app_v1_IsLegalAcceptedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.V1.AcceptLegalRequest, global::Viam.App.V1.AcceptLegalResponse> __Method_AcceptLegal = new grpc::Method<global::Viam.App.V1.AcceptLegalRequest, global::Viam.App.V1.AcceptLegalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcceptLegal",
        __Marshaller_viam_app_v1_AcceptLegalRequest,
        __Marshaller_viam_app_v1_AcceptLegalResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.V1.RegisterAuthApplicationRequest, global::Viam.App.V1.RegisterAuthApplicationResponse> __Method_RegisterAuthApplication = new grpc::Method<global::Viam.App.V1.RegisterAuthApplicationRequest, global::Viam.App.V1.RegisterAuthApplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterAuthApplication",
        __Marshaller_viam_app_v1_RegisterAuthApplicationRequest,
        __Marshaller_viam_app_v1_RegisterAuthApplicationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.V1.UpdateAuthApplicationRequest, global::Viam.App.V1.UpdateAuthApplicationResponse> __Method_UpdateAuthApplication = new grpc::Method<global::Viam.App.V1.UpdateAuthApplicationRequest, global::Viam.App.V1.UpdateAuthApplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAuthApplication",
        __Marshaller_viam_app_v1_UpdateAuthApplicationRequest,
        __Marshaller_viam_app_v1_UpdateAuthApplicationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.App.V1.EndUserReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of EndUserService</summary>
    [grpc::BindServiceMethod(typeof(EndUserService), "BindService")]
    public abstract partial class EndUserServiceBase
    {
      /// <summary>
      /// Returns whether the specified user has accepted end user license agreements.
      /// If false, the user should not be able to use the application.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.V1.IsLegalAcceptedResponse> IsLegalAccepted(global::Viam.App.V1.IsLegalAcceptedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Marks that the specified user has accepted end user license agreements.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.V1.AcceptLegalResponse> AcceptLegal(global::Viam.App.V1.AcceptLegalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Allows users to register third party auth applications using Viam linked to the indicated organization
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.V1.RegisterAuthApplicationResponse> RegisterAuthApplication(global::Viam.App.V1.RegisterAuthApplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Allows users to update their third party auth applications
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.V1.UpdateAuthApplicationResponse> UpdateAuthApplication(global::Viam.App.V1.UpdateAuthApplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for EndUserService</summary>
    public partial class EndUserServiceClient : grpc::ClientBase<EndUserServiceClient>
    {
      /// <summary>Creates a new client for EndUserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EndUserServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EndUserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EndUserServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EndUserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EndUserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns whether the specified user has accepted end user license agreements.
      /// If false, the user should not be able to use the application.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.V1.IsLegalAcceptedResponse IsLegalAccepted(global::Viam.App.V1.IsLegalAcceptedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsLegalAccepted(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns whether the specified user has accepted end user license agreements.
      /// If false, the user should not be able to use the application.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.V1.IsLegalAcceptedResponse IsLegalAccepted(global::Viam.App.V1.IsLegalAcceptedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsLegalAccepted, null, options, request);
      }
      /// <summary>
      /// Returns whether the specified user has accepted end user license agreements.
      /// If false, the user should not be able to use the application.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.V1.IsLegalAcceptedResponse> IsLegalAcceptedAsync(global::Viam.App.V1.IsLegalAcceptedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsLegalAcceptedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns whether the specified user has accepted end user license agreements.
      /// If false, the user should not be able to use the application.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.V1.IsLegalAcceptedResponse> IsLegalAcceptedAsync(global::Viam.App.V1.IsLegalAcceptedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsLegalAccepted, null, options, request);
      }
      /// <summary>
      /// Marks that the specified user has accepted end user license agreements.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.V1.AcceptLegalResponse AcceptLegal(global::Viam.App.V1.AcceptLegalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptLegal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks that the specified user has accepted end user license agreements.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.V1.AcceptLegalResponse AcceptLegal(global::Viam.App.V1.AcceptLegalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcceptLegal, null, options, request);
      }
      /// <summary>
      /// Marks that the specified user has accepted end user license agreements.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.V1.AcceptLegalResponse> AcceptLegalAsync(global::Viam.App.V1.AcceptLegalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptLegalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks that the specified user has accepted end user license agreements.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.V1.AcceptLegalResponse> AcceptLegalAsync(global::Viam.App.V1.AcceptLegalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcceptLegal, null, options, request);
      }
      /// <summary>
      /// Allows users to register third party auth applications using Viam linked to the indicated organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.V1.RegisterAuthApplicationResponse RegisterAuthApplication(global::Viam.App.V1.RegisterAuthApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAuthApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows users to register third party auth applications using Viam linked to the indicated organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.V1.RegisterAuthApplicationResponse RegisterAuthApplication(global::Viam.App.V1.RegisterAuthApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterAuthApplication, null, options, request);
      }
      /// <summary>
      /// Allows users to register third party auth applications using Viam linked to the indicated organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.V1.RegisterAuthApplicationResponse> RegisterAuthApplicationAsync(global::Viam.App.V1.RegisterAuthApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAuthApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows users to register third party auth applications using Viam linked to the indicated organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.V1.RegisterAuthApplicationResponse> RegisterAuthApplicationAsync(global::Viam.App.V1.RegisterAuthApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterAuthApplication, null, options, request);
      }
      /// <summary>
      /// Allows users to update their third party auth applications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.V1.UpdateAuthApplicationResponse UpdateAuthApplication(global::Viam.App.V1.UpdateAuthApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAuthApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows users to update their third party auth applications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.V1.UpdateAuthApplicationResponse UpdateAuthApplication(global::Viam.App.V1.UpdateAuthApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAuthApplication, null, options, request);
      }
      /// <summary>
      /// Allows users to update their third party auth applications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.V1.UpdateAuthApplicationResponse> UpdateAuthApplicationAsync(global::Viam.App.V1.UpdateAuthApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAuthApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows users to update their third party auth applications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.V1.UpdateAuthApplicationResponse> UpdateAuthApplicationAsync(global::Viam.App.V1.UpdateAuthApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAuthApplication, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override EndUserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EndUserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(EndUserServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_IsLegalAccepted, serviceImpl.IsLegalAccepted)
          .AddMethod(__Method_AcceptLegal, serviceImpl.AcceptLegal)
          .AddMethod(__Method_RegisterAuthApplication, serviceImpl.RegisterAuthApplication)
          .AddMethod(__Method_UpdateAuthApplication, serviceImpl.UpdateAuthApplication).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EndUserServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_IsLegalAccepted, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.V1.IsLegalAcceptedRequest, global::Viam.App.V1.IsLegalAcceptedResponse>(serviceImpl.IsLegalAccepted));
      serviceBinder.AddMethod(__Method_AcceptLegal, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.V1.AcceptLegalRequest, global::Viam.App.V1.AcceptLegalResponse>(serviceImpl.AcceptLegal));
      serviceBinder.AddMethod(__Method_RegisterAuthApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.V1.RegisterAuthApplicationRequest, global::Viam.App.V1.RegisterAuthApplicationResponse>(serviceImpl.RegisterAuthApplication));
      serviceBinder.AddMethod(__Method_UpdateAuthApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.V1.UpdateAuthApplicationRequest, global::Viam.App.V1.UpdateAuthApplicationResponse>(serviceImpl.UpdateAuthApplication));
    }

  }
}
#endregion
