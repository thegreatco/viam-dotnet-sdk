// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: provisioning/v1/provisioning.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.Provisioning.V1 {
  /// <summary>
  /// ProvisioningService is used by viam-agent to retrieve the smart machine info.
  /// </summary>
  public static partial class ProvisioningService
  {
    static readonly string __ServiceName = "viam.provisioning.v1.ProvisioningService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Provisioning.V1.GetSmartMachineStatusRequest> __Marshaller_viam_provisioning_v1_GetSmartMachineStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Provisioning.V1.GetSmartMachineStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Provisioning.V1.GetSmartMachineStatusResponse> __Marshaller_viam_provisioning_v1_GetSmartMachineStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Provisioning.V1.GetSmartMachineStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Provisioning.V1.SetNetworkCredentialsRequest> __Marshaller_viam_provisioning_v1_SetNetworkCredentialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Provisioning.V1.SetNetworkCredentialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Provisioning.V1.SetNetworkCredentialsResponse> __Marshaller_viam_provisioning_v1_SetNetworkCredentialsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Provisioning.V1.SetNetworkCredentialsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest> __Marshaller_viam_provisioning_v1_SetSmartMachineCredentialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse> __Marshaller_viam_provisioning_v1_SetSmartMachineCredentialsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Provisioning.V1.GetNetworkListRequest> __Marshaller_viam_provisioning_v1_GetNetworkListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Provisioning.V1.GetNetworkListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Provisioning.V1.GetNetworkListResponse> __Marshaller_viam_provisioning_v1_GetNetworkListResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Provisioning.V1.GetNetworkListResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Provisioning.V1.GetSmartMachineStatusRequest, global::Viam.Provisioning.V1.GetSmartMachineStatusResponse> __Method_GetSmartMachineStatus = new grpc::Method<global::Viam.Provisioning.V1.GetSmartMachineStatusRequest, global::Viam.Provisioning.V1.GetSmartMachineStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSmartMachineStatus",
        __Marshaller_viam_provisioning_v1_GetSmartMachineStatusRequest,
        __Marshaller_viam_provisioning_v1_GetSmartMachineStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Provisioning.V1.SetNetworkCredentialsRequest, global::Viam.Provisioning.V1.SetNetworkCredentialsResponse> __Method_SetNetworkCredentials = new grpc::Method<global::Viam.Provisioning.V1.SetNetworkCredentialsRequest, global::Viam.Provisioning.V1.SetNetworkCredentialsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetNetworkCredentials",
        __Marshaller_viam_provisioning_v1_SetNetworkCredentialsRequest,
        __Marshaller_viam_provisioning_v1_SetNetworkCredentialsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest, global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse> __Method_SetSmartMachineCredentials = new grpc::Method<global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest, global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSmartMachineCredentials",
        __Marshaller_viam_provisioning_v1_SetSmartMachineCredentialsRequest,
        __Marshaller_viam_provisioning_v1_SetSmartMachineCredentialsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Provisioning.V1.GetNetworkListRequest, global::Viam.Provisioning.V1.GetNetworkListResponse> __Method_GetNetworkList = new grpc::Method<global::Viam.Provisioning.V1.GetNetworkListRequest, global::Viam.Provisioning.V1.GetNetworkListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNetworkList",
        __Marshaller_viam_provisioning_v1_GetNetworkListRequest,
        __Marshaller_viam_provisioning_v1_GetNetworkListResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.Provisioning.V1.ProvisioningReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProvisioningService</summary>
    [grpc::BindServiceMethod(typeof(ProvisioningService), "BindService")]
    public abstract partial class ProvisioningServiceBase
    {
      /// <summary>
      /// GetSmartMachineStatus is for retrieving the status of the smart machine including networking.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Provisioning.V1.GetSmartMachineStatusResponse> GetSmartMachineStatus(global::Viam.Provisioning.V1.GetSmartMachineStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SetNetworkCredentials is to set the wifi credentials.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Provisioning.V1.SetNetworkCredentialsResponse> SetNetworkCredentials(global::Viam.Provisioning.V1.SetNetworkCredentialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SetSmartMachineCredentials is to set the smart machine credentials.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse> SetSmartMachineCredentials(global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetNetworkList is to retrieve the list of networks that are visible to the smart machine.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Provisioning.V1.GetNetworkListResponse> GetNetworkList(global::Viam.Provisioning.V1.GetNetworkListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProvisioningService</summary>
    public partial class ProvisioningServiceClient : grpc::ClientBase<ProvisioningServiceClient>
    {
      /// <summary>Creates a new client for ProvisioningService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProvisioningServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProvisioningService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProvisioningServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProvisioningServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProvisioningServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetSmartMachineStatus is for retrieving the status of the smart machine including networking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Provisioning.V1.GetSmartMachineStatusResponse GetSmartMachineStatus(global::Viam.Provisioning.V1.GetSmartMachineStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSmartMachineStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSmartMachineStatus is for retrieving the status of the smart machine including networking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Provisioning.V1.GetSmartMachineStatusResponse GetSmartMachineStatus(global::Viam.Provisioning.V1.GetSmartMachineStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSmartMachineStatus, null, options, request);
      }
      /// <summary>
      /// GetSmartMachineStatus is for retrieving the status of the smart machine including networking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Provisioning.V1.GetSmartMachineStatusResponse> GetSmartMachineStatusAsync(global::Viam.Provisioning.V1.GetSmartMachineStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSmartMachineStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSmartMachineStatus is for retrieving the status of the smart machine including networking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Provisioning.V1.GetSmartMachineStatusResponse> GetSmartMachineStatusAsync(global::Viam.Provisioning.V1.GetSmartMachineStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSmartMachineStatus, null, options, request);
      }
      /// <summary>
      /// SetNetworkCredentials is to set the wifi credentials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Provisioning.V1.SetNetworkCredentialsResponse SetNetworkCredentials(global::Viam.Provisioning.V1.SetNetworkCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNetworkCredentials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetNetworkCredentials is to set the wifi credentials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Provisioning.V1.SetNetworkCredentialsResponse SetNetworkCredentials(global::Viam.Provisioning.V1.SetNetworkCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNetworkCredentials, null, options, request);
      }
      /// <summary>
      /// SetNetworkCredentials is to set the wifi credentials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Provisioning.V1.SetNetworkCredentialsResponse> SetNetworkCredentialsAsync(global::Viam.Provisioning.V1.SetNetworkCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNetworkCredentialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetNetworkCredentials is to set the wifi credentials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Provisioning.V1.SetNetworkCredentialsResponse> SetNetworkCredentialsAsync(global::Viam.Provisioning.V1.SetNetworkCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNetworkCredentials, null, options, request);
      }
      /// <summary>
      /// SetSmartMachineCredentials is to set the smart machine credentials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse SetSmartMachineCredentials(global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSmartMachineCredentials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetSmartMachineCredentials is to set the smart machine credentials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse SetSmartMachineCredentials(global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSmartMachineCredentials, null, options, request);
      }
      /// <summary>
      /// SetSmartMachineCredentials is to set the smart machine credentials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse> SetSmartMachineCredentialsAsync(global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSmartMachineCredentialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetSmartMachineCredentials is to set the smart machine credentials.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse> SetSmartMachineCredentialsAsync(global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSmartMachineCredentials, null, options, request);
      }
      /// <summary>
      /// GetNetworkList is to retrieve the list of networks that are visible to the smart machine.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Provisioning.V1.GetNetworkListResponse GetNetworkList(global::Viam.Provisioning.V1.GetNetworkListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetworkList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetNetworkList is to retrieve the list of networks that are visible to the smart machine.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Provisioning.V1.GetNetworkListResponse GetNetworkList(global::Viam.Provisioning.V1.GetNetworkListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNetworkList, null, options, request);
      }
      /// <summary>
      /// GetNetworkList is to retrieve the list of networks that are visible to the smart machine.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Provisioning.V1.GetNetworkListResponse> GetNetworkListAsync(global::Viam.Provisioning.V1.GetNetworkListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetworkListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetNetworkList is to retrieve the list of networks that are visible to the smart machine.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Provisioning.V1.GetNetworkListResponse> GetNetworkListAsync(global::Viam.Provisioning.V1.GetNetworkListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNetworkList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ProvisioningServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProvisioningServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ProvisioningServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetSmartMachineStatus, serviceImpl.GetSmartMachineStatus)
          .AddMethod(__Method_SetNetworkCredentials, serviceImpl.SetNetworkCredentials)
          .AddMethod(__Method_SetSmartMachineCredentials, serviceImpl.SetSmartMachineCredentials)
          .AddMethod(__Method_GetNetworkList, serviceImpl.GetNetworkList).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProvisioningServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetSmartMachineStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Provisioning.V1.GetSmartMachineStatusRequest, global::Viam.Provisioning.V1.GetSmartMachineStatusResponse>(serviceImpl.GetSmartMachineStatus));
      serviceBinder.AddMethod(__Method_SetNetworkCredentials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Provisioning.V1.SetNetworkCredentialsRequest, global::Viam.Provisioning.V1.SetNetworkCredentialsResponse>(serviceImpl.SetNetworkCredentials));
      serviceBinder.AddMethod(__Method_SetSmartMachineCredentials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Provisioning.V1.SetSmartMachineCredentialsRequest, global::Viam.Provisioning.V1.SetSmartMachineCredentialsResponse>(serviceImpl.SetSmartMachineCredentials));
      serviceBinder.AddMethod(__Method_GetNetworkList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Provisioning.V1.GetNetworkListRequest, global::Viam.Provisioning.V1.GetNetworkListResponse>(serviceImpl.GetNetworkList));
    }

  }
}
#endregion
