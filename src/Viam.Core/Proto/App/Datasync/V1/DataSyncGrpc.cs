// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app/datasync/v1/data_sync.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.App.Datasync.V1 {
  public static partial class DataSyncService
  {
    static readonly string __ServiceName = "viam.app.datasync.v1.DataSyncService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datasync.V1.DataCaptureUploadRequest> __Marshaller_viam_app_datasync_v1_DataCaptureUploadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datasync.V1.DataCaptureUploadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datasync.V1.DataCaptureUploadResponse> __Marshaller_viam_app_datasync_v1_DataCaptureUploadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datasync.V1.DataCaptureUploadResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datasync.V1.FileUploadRequest> __Marshaller_viam_app_datasync_v1_FileUploadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datasync.V1.FileUploadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datasync.V1.FileUploadResponse> __Marshaller_viam_app_datasync_v1_FileUploadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datasync.V1.FileUploadResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datasync.V1.StreamingDataCaptureUploadRequest> __Marshaller_viam_app_datasync_v1_StreamingDataCaptureUploadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datasync.V1.StreamingDataCaptureUploadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datasync.V1.StreamingDataCaptureUploadResponse> __Marshaller_viam_app_datasync_v1_StreamingDataCaptureUploadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datasync.V1.StreamingDataCaptureUploadResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datasync.V1.DataCaptureUploadRequest, global::Viam.App.Datasync.V1.DataCaptureUploadResponse> __Method_DataCaptureUpload = new grpc::Method<global::Viam.App.Datasync.V1.DataCaptureUploadRequest, global::Viam.App.Datasync.V1.DataCaptureUploadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DataCaptureUpload",
        __Marshaller_viam_app_datasync_v1_DataCaptureUploadRequest,
        __Marshaller_viam_app_datasync_v1_DataCaptureUploadResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datasync.V1.FileUploadRequest, global::Viam.App.Datasync.V1.FileUploadResponse> __Method_FileUpload = new grpc::Method<global::Viam.App.Datasync.V1.FileUploadRequest, global::Viam.App.Datasync.V1.FileUploadResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "FileUpload",
        __Marshaller_viam_app_datasync_v1_FileUploadRequest,
        __Marshaller_viam_app_datasync_v1_FileUploadResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datasync.V1.StreamingDataCaptureUploadRequest, global::Viam.App.Datasync.V1.StreamingDataCaptureUploadResponse> __Method_StreamingDataCaptureUpload = new grpc::Method<global::Viam.App.Datasync.V1.StreamingDataCaptureUploadRequest, global::Viam.App.Datasync.V1.StreamingDataCaptureUploadResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamingDataCaptureUpload",
        __Marshaller_viam_app_datasync_v1_StreamingDataCaptureUploadRequest,
        __Marshaller_viam_app_datasync_v1_StreamingDataCaptureUploadResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.App.Datasync.V1.DataSyncReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DataSyncService</summary>
    [grpc::BindServiceMethod(typeof(DataSyncService), "BindService")]
    public abstract partial class DataSyncServiceBase
    {
      /// <summary>
      /// DataCaptureUpload uploads the contents and metadata for tabular data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datasync.V1.DataCaptureUploadResponse> DataCaptureUpload(global::Viam.App.Datasync.V1.DataCaptureUploadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FileUpload uploads the contents and metadata for binary (image + file) data,
      /// where the first packet must be the UploadMetadata.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datasync.V1.FileUploadResponse> FileUpload(grpc::IAsyncStreamReader<global::Viam.App.Datasync.V1.FileUploadRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamingDataCaptureUpload uploads the streaming contents and metadata for streaming binary (image + file) data,
      /// where the first packet must be the UploadMetadata.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datasync.V1.StreamingDataCaptureUploadResponse> StreamingDataCaptureUpload(grpc::IAsyncStreamReader<global::Viam.App.Datasync.V1.StreamingDataCaptureUploadRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataSyncService</summary>
    public partial class DataSyncServiceClient : grpc::ClientBase<DataSyncServiceClient>
    {
      /// <summary>Creates a new client for DataSyncService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataSyncServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataSyncService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataSyncServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataSyncServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataSyncServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// DataCaptureUpload uploads the contents and metadata for tabular data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datasync.V1.DataCaptureUploadResponse DataCaptureUpload(global::Viam.App.Datasync.V1.DataCaptureUploadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DataCaptureUpload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DataCaptureUpload uploads the contents and metadata for tabular data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datasync.V1.DataCaptureUploadResponse DataCaptureUpload(global::Viam.App.Datasync.V1.DataCaptureUploadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DataCaptureUpload, null, options, request);
      }
      /// <summary>
      /// DataCaptureUpload uploads the contents and metadata for tabular data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datasync.V1.DataCaptureUploadResponse> DataCaptureUploadAsync(global::Viam.App.Datasync.V1.DataCaptureUploadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DataCaptureUploadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DataCaptureUpload uploads the contents and metadata for tabular data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datasync.V1.DataCaptureUploadResponse> DataCaptureUploadAsync(global::Viam.App.Datasync.V1.DataCaptureUploadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DataCaptureUpload, null, options, request);
      }
      /// <summary>
      /// FileUpload uploads the contents and metadata for binary (image + file) data,
      /// where the first packet must be the UploadMetadata.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Viam.App.Datasync.V1.FileUploadRequest, global::Viam.App.Datasync.V1.FileUploadResponse> FileUpload(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FileUpload(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FileUpload uploads the contents and metadata for binary (image + file) data,
      /// where the first packet must be the UploadMetadata.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Viam.App.Datasync.V1.FileUploadRequest, global::Viam.App.Datasync.V1.FileUploadResponse> FileUpload(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_FileUpload, null, options);
      }
      /// <summary>
      /// StreamingDataCaptureUpload uploads the streaming contents and metadata for streaming binary (image + file) data,
      /// where the first packet must be the UploadMetadata.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Viam.App.Datasync.V1.StreamingDataCaptureUploadRequest, global::Viam.App.Datasync.V1.StreamingDataCaptureUploadResponse> StreamingDataCaptureUpload(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamingDataCaptureUpload(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamingDataCaptureUpload uploads the streaming contents and metadata for streaming binary (image + file) data,
      /// where the first packet must be the UploadMetadata.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Viam.App.Datasync.V1.StreamingDataCaptureUploadRequest, global::Viam.App.Datasync.V1.StreamingDataCaptureUploadResponse> StreamingDataCaptureUpload(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamingDataCaptureUpload, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DataSyncServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataSyncServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DataSyncServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DataCaptureUpload, serviceImpl.DataCaptureUpload)
          .AddMethod(__Method_FileUpload, serviceImpl.FileUpload)
          .AddMethod(__Method_StreamingDataCaptureUpload, serviceImpl.StreamingDataCaptureUpload).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataSyncServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DataCaptureUpload, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Datasync.V1.DataCaptureUploadRequest, global::Viam.App.Datasync.V1.DataCaptureUploadResponse>(serviceImpl.DataCaptureUpload));
      serviceBinder.AddMethod(__Method_FileUpload, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Viam.App.Datasync.V1.FileUploadRequest, global::Viam.App.Datasync.V1.FileUploadResponse>(serviceImpl.FileUpload));
      serviceBinder.AddMethod(__Method_StreamingDataCaptureUpload, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Viam.App.Datasync.V1.StreamingDataCaptureUploadRequest, global::Viam.App.Datasync.V1.StreamingDataCaptureUploadResponse>(serviceImpl.StreamingDataCaptureUpload));
    }

  }
}
#endregion
