// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app/datapipelines/v1/data_pipelines.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.App.Datapipelines.V1 {
  /// <summary>
  /// DataPipelinesService is used to manage data pipelines.
  /// </summary>
  public static partial class DataPipelinesService
  {
    static readonly string __ServiceName = "viam.app.datapipelines.v1.DataPipelinesService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.GetDataPipelineRequest> __Marshaller_viam_app_datapipelines_v1_GetDataPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.GetDataPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.GetDataPipelineResponse> __Marshaller_viam_app_datapipelines_v1_GetDataPipelineResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.GetDataPipelineResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest> __Marshaller_viam_app_datapipelines_v1_ListDataPipelinesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse> __Marshaller_viam_app_datapipelines_v1_ListDataPipelinesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest> __Marshaller_viam_app_datapipelines_v1_CreateDataPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse> __Marshaller_viam_app_datapipelines_v1_CreateDataPipelineResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest> __Marshaller_viam_app_datapipelines_v1_UpdateDataPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse> __Marshaller_viam_app_datapipelines_v1_UpdateDataPipelineResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest> __Marshaller_viam_app_datapipelines_v1_DeleteDataPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse> __Marshaller_viam_app_datapipelines_v1_DeleteDataPipelineResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest> __Marshaller_viam_app_datapipelines_v1_EnableDataPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse> __Marshaller_viam_app_datapipelines_v1_EnableDataPipelineResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest> __Marshaller_viam_app_datapipelines_v1_DisableDataPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse> __Marshaller_viam_app_datapipelines_v1_DisableDataPipelineResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest> __Marshaller_viam_app_datapipelines_v1_ListDataPipelineRunsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse> __Marshaller_viam_app_datapipelines_v1_ListDataPipelineRunsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datapipelines.V1.GetDataPipelineRequest, global::Viam.App.Datapipelines.V1.GetDataPipelineResponse> __Method_GetDataPipeline = new grpc::Method<global::Viam.App.Datapipelines.V1.GetDataPipelineRequest, global::Viam.App.Datapipelines.V1.GetDataPipelineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataPipeline",
        __Marshaller_viam_app_datapipelines_v1_GetDataPipelineRequest,
        __Marshaller_viam_app_datapipelines_v1_GetDataPipelineResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest, global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse> __Method_ListDataPipelines = new grpc::Method<global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest, global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDataPipelines",
        __Marshaller_viam_app_datapipelines_v1_ListDataPipelinesRequest,
        __Marshaller_viam_app_datapipelines_v1_ListDataPipelinesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest, global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse> __Method_CreateDataPipeline = new grpc::Method<global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest, global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDataPipeline",
        __Marshaller_viam_app_datapipelines_v1_CreateDataPipelineRequest,
        __Marshaller_viam_app_datapipelines_v1_CreateDataPipelineResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest, global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse> __Method_UpdateDataPipeline = new grpc::Method<global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest, global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDataPipeline",
        __Marshaller_viam_app_datapipelines_v1_UpdateDataPipelineRequest,
        __Marshaller_viam_app_datapipelines_v1_UpdateDataPipelineResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest, global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse> __Method_DeleteDataPipeline = new grpc::Method<global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest, global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDataPipeline",
        __Marshaller_viam_app_datapipelines_v1_DeleteDataPipelineRequest,
        __Marshaller_viam_app_datapipelines_v1_DeleteDataPipelineResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest, global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse> __Method_EnableDataPipeline = new grpc::Method<global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest, global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableDataPipeline",
        __Marshaller_viam_app_datapipelines_v1_EnableDataPipelineRequest,
        __Marshaller_viam_app_datapipelines_v1_EnableDataPipelineResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest, global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse> __Method_DisableDataPipeline = new grpc::Method<global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest, global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DisableDataPipeline",
        __Marshaller_viam_app_datapipelines_v1_DisableDataPipelineRequest,
        __Marshaller_viam_app_datapipelines_v1_DisableDataPipelineResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest, global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse> __Method_ListDataPipelineRuns = new grpc::Method<global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest, global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDataPipelineRuns",
        __Marshaller_viam_app_datapipelines_v1_ListDataPipelineRunsRequest,
        __Marshaller_viam_app_datapipelines_v1_ListDataPipelineRunsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.App.Datapipelines.V1.DataPipelinesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DataPipelinesService</summary>
    [grpc::BindServiceMethod(typeof(DataPipelinesService), "BindService")]
    public abstract partial class DataPipelinesServiceBase
    {
      /// <summary>
      /// GetDataPipeline retrieves a specific data pipeline by its id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datapipelines.V1.GetDataPipelineResponse> GetDataPipeline(global::Viam.App.Datapipelines.V1.GetDataPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListDataPipelines returns a list of data pipelines based on organization id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse> ListDataPipelines(global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateDataPipeline creates a new data pipeline with the provided configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse> CreateDataPipeline(global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateDataPipeline modifies an existing data pipeline's configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse> UpdateDataPipeline(global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteDataPipeline deletes a data pipeline from the database.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse> DeleteDataPipeline(global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// EnableDataPipeline enables a data pipeline.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse> EnableDataPipeline(global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DisableDataPipeline disables a data pipeline.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse> DisableDataPipeline(global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListDataPipelineRuns lists the runs of a data pipeline.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse> ListDataPipelineRuns(global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataPipelinesService</summary>
    public partial class DataPipelinesServiceClient : grpc::ClientBase<DataPipelinesServiceClient>
    {
      /// <summary>Creates a new client for DataPipelinesService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataPipelinesServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataPipelinesService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataPipelinesServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataPipelinesServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataPipelinesServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetDataPipeline retrieves a specific data pipeline by its id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.GetDataPipelineResponse GetDataPipeline(global::Viam.App.Datapipelines.V1.GetDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDataPipeline retrieves a specific data pipeline by its id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.GetDataPipelineResponse GetDataPipeline(global::Viam.App.Datapipelines.V1.GetDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataPipeline, null, options, request);
      }
      /// <summary>
      /// GetDataPipeline retrieves a specific data pipeline by its id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.GetDataPipelineResponse> GetDataPipelineAsync(global::Viam.App.Datapipelines.V1.GetDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDataPipeline retrieves a specific data pipeline by its id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.GetDataPipelineResponse> GetDataPipelineAsync(global::Viam.App.Datapipelines.V1.GetDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataPipeline, null, options, request);
      }
      /// <summary>
      /// ListDataPipelines returns a list of data pipelines based on organization id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse ListDataPipelines(global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataPipelines(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListDataPipelines returns a list of data pipelines based on organization id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse ListDataPipelines(global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDataPipelines, null, options, request);
      }
      /// <summary>
      /// ListDataPipelines returns a list of data pipelines based on organization id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse> ListDataPipelinesAsync(global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataPipelinesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListDataPipelines returns a list of data pipelines based on organization id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse> ListDataPipelinesAsync(global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDataPipelines, null, options, request);
      }
      /// <summary>
      /// CreateDataPipeline creates a new data pipeline with the provided configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse CreateDataPipeline(global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDataPipeline creates a new data pipeline with the provided configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse CreateDataPipeline(global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDataPipeline, null, options, request);
      }
      /// <summary>
      /// CreateDataPipeline creates a new data pipeline with the provided configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse> CreateDataPipelineAsync(global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDataPipeline creates a new data pipeline with the provided configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse> CreateDataPipelineAsync(global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDataPipeline, null, options, request);
      }
      /// <summary>
      /// UpdateDataPipeline modifies an existing data pipeline's configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse UpdateDataPipeline(global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateDataPipeline modifies an existing data pipeline's configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse UpdateDataPipeline(global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDataPipeline, null, options, request);
      }
      /// <summary>
      /// UpdateDataPipeline modifies an existing data pipeline's configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse> UpdateDataPipelineAsync(global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateDataPipeline modifies an existing data pipeline's configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse> UpdateDataPipelineAsync(global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDataPipeline, null, options, request);
      }
      /// <summary>
      /// DeleteDataPipeline deletes a data pipeline from the database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse DeleteDataPipeline(global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteDataPipeline deletes a data pipeline from the database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse DeleteDataPipeline(global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDataPipeline, null, options, request);
      }
      /// <summary>
      /// DeleteDataPipeline deletes a data pipeline from the database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse> DeleteDataPipelineAsync(global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteDataPipeline deletes a data pipeline from the database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse> DeleteDataPipelineAsync(global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDataPipeline, null, options, request);
      }
      /// <summary>
      /// EnableDataPipeline enables a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse EnableDataPipeline(global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableDataPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EnableDataPipeline enables a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse EnableDataPipeline(global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableDataPipeline, null, options, request);
      }
      /// <summary>
      /// EnableDataPipeline enables a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse> EnableDataPipelineAsync(global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableDataPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EnableDataPipeline enables a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse> EnableDataPipelineAsync(global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableDataPipeline, null, options, request);
      }
      /// <summary>
      /// DisableDataPipeline disables a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse DisableDataPipeline(global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableDataPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DisableDataPipeline disables a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse DisableDataPipeline(global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DisableDataPipeline, null, options, request);
      }
      /// <summary>
      /// DisableDataPipeline disables a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse> DisableDataPipelineAsync(global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableDataPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DisableDataPipeline disables a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse> DisableDataPipelineAsync(global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DisableDataPipeline, null, options, request);
      }
      /// <summary>
      /// ListDataPipelineRuns lists the runs of a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse ListDataPipelineRuns(global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataPipelineRuns(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListDataPipelineRuns lists the runs of a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse ListDataPipelineRuns(global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDataPipelineRuns, null, options, request);
      }
      /// <summary>
      /// ListDataPipelineRuns lists the runs of a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse> ListDataPipelineRunsAsync(global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataPipelineRunsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListDataPipelineRuns lists the runs of a data pipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse> ListDataPipelineRunsAsync(global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDataPipelineRuns, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DataPipelinesServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataPipelinesServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DataPipelinesServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetDataPipeline, serviceImpl.GetDataPipeline)
          .AddMethod(__Method_ListDataPipelines, serviceImpl.ListDataPipelines)
          .AddMethod(__Method_CreateDataPipeline, serviceImpl.CreateDataPipeline)
          .AddMethod(__Method_UpdateDataPipeline, serviceImpl.UpdateDataPipeline)
          .AddMethod(__Method_DeleteDataPipeline, serviceImpl.DeleteDataPipeline)
          .AddMethod(__Method_EnableDataPipeline, serviceImpl.EnableDataPipeline)
          .AddMethod(__Method_DisableDataPipeline, serviceImpl.DisableDataPipeline)
          .AddMethod(__Method_ListDataPipelineRuns, serviceImpl.ListDataPipelineRuns).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataPipelinesServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetDataPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Datapipelines.V1.GetDataPipelineRequest, global::Viam.App.Datapipelines.V1.GetDataPipelineResponse>(serviceImpl.GetDataPipeline));
      serviceBinder.AddMethod(__Method_ListDataPipelines, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Datapipelines.V1.ListDataPipelinesRequest, global::Viam.App.Datapipelines.V1.ListDataPipelinesResponse>(serviceImpl.ListDataPipelines));
      serviceBinder.AddMethod(__Method_CreateDataPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Datapipelines.V1.CreateDataPipelineRequest, global::Viam.App.Datapipelines.V1.CreateDataPipelineResponse>(serviceImpl.CreateDataPipeline));
      serviceBinder.AddMethod(__Method_UpdateDataPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Datapipelines.V1.UpdateDataPipelineRequest, global::Viam.App.Datapipelines.V1.UpdateDataPipelineResponse>(serviceImpl.UpdateDataPipeline));
      serviceBinder.AddMethod(__Method_DeleteDataPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Datapipelines.V1.DeleteDataPipelineRequest, global::Viam.App.Datapipelines.V1.DeleteDataPipelineResponse>(serviceImpl.DeleteDataPipeline));
      serviceBinder.AddMethod(__Method_EnableDataPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Datapipelines.V1.EnableDataPipelineRequest, global::Viam.App.Datapipelines.V1.EnableDataPipelineResponse>(serviceImpl.EnableDataPipeline));
      serviceBinder.AddMethod(__Method_DisableDataPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Datapipelines.V1.DisableDataPipelineRequest, global::Viam.App.Datapipelines.V1.DisableDataPipelineResponse>(serviceImpl.DisableDataPipeline));
      serviceBinder.AddMethod(__Method_ListDataPipelineRuns, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Datapipelines.V1.ListDataPipelineRunsRequest, global::Viam.App.Datapipelines.V1.ListDataPipelineRunsResponse>(serviceImpl.ListDataPipelineRuns));
    }

  }
}
#endregion
