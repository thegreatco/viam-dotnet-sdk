// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app/packages/v1/packages.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.App.Packages.V1 {
  public static partial class PackageService
  {
    static readonly string __ServiceName = "viam.app.packages.v1.PackageService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Packages.V1.CreatePackageRequest> __Marshaller_viam_app_packages_v1_CreatePackageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Packages.V1.CreatePackageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Packages.V1.CreatePackageResponse> __Marshaller_viam_app_packages_v1_CreatePackageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Packages.V1.CreatePackageResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Packages.V1.DeletePackageRequest> __Marshaller_viam_app_packages_v1_DeletePackageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Packages.V1.DeletePackageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Packages.V1.DeletePackageResponse> __Marshaller_viam_app_packages_v1_DeletePackageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Packages.V1.DeletePackageResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Packages.V1.GetPackageRequest> __Marshaller_viam_app_packages_v1_GetPackageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Packages.V1.GetPackageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Packages.V1.GetPackageResponse> __Marshaller_viam_app_packages_v1_GetPackageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Packages.V1.GetPackageResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Packages.V1.ListPackagesRequest> __Marshaller_viam_app_packages_v1_ListPackagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Packages.V1.ListPackagesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.App.Packages.V1.ListPackagesResponse> __Marshaller_viam_app_packages_v1_ListPackagesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.App.Packages.V1.ListPackagesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Packages.V1.CreatePackageRequest, global::Viam.App.Packages.V1.CreatePackageResponse> __Method_CreatePackage = new grpc::Method<global::Viam.App.Packages.V1.CreatePackageRequest, global::Viam.App.Packages.V1.CreatePackageResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "CreatePackage",
        __Marshaller_viam_app_packages_v1_CreatePackageRequest,
        __Marshaller_viam_app_packages_v1_CreatePackageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Packages.V1.DeletePackageRequest, global::Viam.App.Packages.V1.DeletePackageResponse> __Method_DeletePackage = new grpc::Method<global::Viam.App.Packages.V1.DeletePackageRequest, global::Viam.App.Packages.V1.DeletePackageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePackage",
        __Marshaller_viam_app_packages_v1_DeletePackageRequest,
        __Marshaller_viam_app_packages_v1_DeletePackageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Packages.V1.GetPackageRequest, global::Viam.App.Packages.V1.GetPackageResponse> __Method_GetPackage = new grpc::Method<global::Viam.App.Packages.V1.GetPackageRequest, global::Viam.App.Packages.V1.GetPackageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPackage",
        __Marshaller_viam_app_packages_v1_GetPackageRequest,
        __Marshaller_viam_app_packages_v1_GetPackageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.App.Packages.V1.ListPackagesRequest, global::Viam.App.Packages.V1.ListPackagesResponse> __Method_ListPackages = new grpc::Method<global::Viam.App.Packages.V1.ListPackagesRequest, global::Viam.App.Packages.V1.ListPackagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPackages",
        __Marshaller_viam_app_packages_v1_ListPackagesRequest,
        __Marshaller_viam_app_packages_v1_ListPackagesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.App.Packages.V1.PackagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PackageService</summary>
    [grpc::BindServiceMethod(typeof(PackageService), "BindService")]
    public abstract partial class PackageServiceBase
    {
      /// <summary>
      /// CreatePackage uploads a package to the cloud
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Packages.V1.CreatePackageResponse> CreatePackage(grpc::IAsyncStreamReader<global::Viam.App.Packages.V1.CreatePackageRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeletePackage removes the given package versions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Packages.V1.DeletePackageResponse> DeletePackage(global::Viam.App.Packages.V1.DeletePackageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetPackage returns the metadata for a requested package version. It also returns a URL
      /// for downloading the package if one is requested.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Packages.V1.GetPackageResponse> GetPackage(global::Viam.App.Packages.V1.GetPackageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListPackages gets the metadata for the requested packages. Includes package name, version, and/or
      /// type to filter beyond the required organization_id. ListPackages also returns URLs for
      /// downloading each package if they are requested.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.App.Packages.V1.ListPackagesResponse> ListPackages(global::Viam.App.Packages.V1.ListPackagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PackageService</summary>
    public partial class PackageServiceClient : grpc::ClientBase<PackageServiceClient>
    {
      /// <summary>Creates a new client for PackageService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PackageServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PackageService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PackageServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PackageServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PackageServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// CreatePackage uploads a package to the cloud
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Viam.App.Packages.V1.CreatePackageRequest, global::Viam.App.Packages.V1.CreatePackageResponse> CreatePackage(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePackage(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreatePackage uploads a package to the cloud
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Viam.App.Packages.V1.CreatePackageRequest, global::Viam.App.Packages.V1.CreatePackageResponse> CreatePackage(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_CreatePackage, null, options);
      }
      /// <summary>
      /// DeletePackage removes the given package versions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Packages.V1.DeletePackageResponse DeletePackage(global::Viam.App.Packages.V1.DeletePackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePackage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeletePackage removes the given package versions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Packages.V1.DeletePackageResponse DeletePackage(global::Viam.App.Packages.V1.DeletePackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePackage, null, options, request);
      }
      /// <summary>
      /// DeletePackage removes the given package versions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Packages.V1.DeletePackageResponse> DeletePackageAsync(global::Viam.App.Packages.V1.DeletePackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePackageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeletePackage removes the given package versions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Packages.V1.DeletePackageResponse> DeletePackageAsync(global::Viam.App.Packages.V1.DeletePackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePackage, null, options, request);
      }
      /// <summary>
      /// GetPackage returns the metadata for a requested package version. It also returns a URL
      /// for downloading the package if one is requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Packages.V1.GetPackageResponse GetPackage(global::Viam.App.Packages.V1.GetPackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPackage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetPackage returns the metadata for a requested package version. It also returns a URL
      /// for downloading the package if one is requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Packages.V1.GetPackageResponse GetPackage(global::Viam.App.Packages.V1.GetPackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPackage, null, options, request);
      }
      /// <summary>
      /// GetPackage returns the metadata for a requested package version. It also returns a URL
      /// for downloading the package if one is requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Packages.V1.GetPackageResponse> GetPackageAsync(global::Viam.App.Packages.V1.GetPackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPackageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetPackage returns the metadata for a requested package version. It also returns a URL
      /// for downloading the package if one is requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Packages.V1.GetPackageResponse> GetPackageAsync(global::Viam.App.Packages.V1.GetPackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPackage, null, options, request);
      }
      /// <summary>
      /// ListPackages gets the metadata for the requested packages. Includes package name, version, and/or
      /// type to filter beyond the required organization_id. ListPackages also returns URLs for
      /// downloading each package if they are requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Packages.V1.ListPackagesResponse ListPackages(global::Viam.App.Packages.V1.ListPackagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPackages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListPackages gets the metadata for the requested packages. Includes package name, version, and/or
      /// type to filter beyond the required organization_id. ListPackages also returns URLs for
      /// downloading each package if they are requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.App.Packages.V1.ListPackagesResponse ListPackages(global::Viam.App.Packages.V1.ListPackagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPackages, null, options, request);
      }
      /// <summary>
      /// ListPackages gets the metadata for the requested packages. Includes package name, version, and/or
      /// type to filter beyond the required organization_id. ListPackages also returns URLs for
      /// downloading each package if they are requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Packages.V1.ListPackagesResponse> ListPackagesAsync(global::Viam.App.Packages.V1.ListPackagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPackagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListPackages gets the metadata for the requested packages. Includes package name, version, and/or
      /// type to filter beyond the required organization_id. ListPackages also returns URLs for
      /// downloading each package if they are requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.App.Packages.V1.ListPackagesResponse> ListPackagesAsync(global::Viam.App.Packages.V1.ListPackagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPackages, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override PackageServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PackageServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(PackageServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreatePackage, serviceImpl.CreatePackage)
          .AddMethod(__Method_DeletePackage, serviceImpl.DeletePackage)
          .AddMethod(__Method_GetPackage, serviceImpl.GetPackage)
          .AddMethod(__Method_ListPackages, serviceImpl.ListPackages).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PackageServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreatePackage, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Viam.App.Packages.V1.CreatePackageRequest, global::Viam.App.Packages.V1.CreatePackageResponse>(serviceImpl.CreatePackage));
      serviceBinder.AddMethod(__Method_DeletePackage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Packages.V1.DeletePackageRequest, global::Viam.App.Packages.V1.DeletePackageResponse>(serviceImpl.DeletePackage));
      serviceBinder.AddMethod(__Method_GetPackage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Packages.V1.GetPackageRequest, global::Viam.App.Packages.V1.GetPackageResponse>(serviceImpl.GetPackage));
      serviceBinder.AddMethod(__Method_ListPackages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.App.Packages.V1.ListPackagesRequest, global::Viam.App.Packages.V1.ListPackagesResponse>(serviceImpl.ListPackages));
    }

  }
}
#endregion
